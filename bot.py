import json
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# ’Ñ’•’∂’µ’∏÷Ç’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
with open("menu.json", "r", encoding="utf-8") as f:
    menu = json.load(f)

def find_dish(query):
    for item in menu:
        if query.lower() in item["name_hy"].lower() or query.lower() in item["name_en"].lower():
            return item
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‘≤’°÷Ä÷á ‚ò∫Ô∏è ‘µ’Ω Sorriso ’¢’∏’©’∂ ’•’¥, ÷Ö’£’∂’•’¥ ’´’¥’°’∂’°’¨’ù ’∏÷Ç’ø’•’Ω’ø’® ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’¥ ’ß ’°’¨’•÷Ä’£’•’∂’∂’•÷Ä ’©’• ’∏’π÷â ‘≥÷Ä’´÷Ä ’∏÷Ç’ø’•’Ω’ø’´ ’°’∂’∏÷Ç’∂’®÷â")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    dish = find_dish(text)

    if dish:
        allergens = ", ".join(dish["allergens"])
        if text.isascii():
            response = f"{dish['name_en']} contains: {allergens}."
        else:
            response = f"{dish['name_hy']} ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’¥ ’ß’ù {allergens}"
    else:
        response = "’Ü’¥’°’∂ ’∏÷Ç’ø’•’Ω’ø ’π’£’ø’° üòî"

    await update.message.reply_text(response)

async def main():
    token = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("ü§ñ Bot is running...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
